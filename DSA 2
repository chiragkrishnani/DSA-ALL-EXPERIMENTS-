#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX 100 
typedef struct {
    int top;
    char items[MAX];
} Stack;
void push(Stack* s, char c) {
    if (s->top == (MAX - 1)) {
        printf("Stack overflow\n");
        return;
    }
    s->items[++(s->top)] = c;
}

char pop(Stack* s) 
if (s->top == -1) {
        printf("Stack underflow\n");
        return '\0';
    }
    return s->items[(s->top)--];
}
Char peek(Stack* s) {
    if (s->top == -1) {
        return '\0';
    }
    return s->items[s->top];
}

int isEmpty(Stack* s) {
    return s->top == -1;
}

int isOperator(char c) {
 return c == '+' || c == '-' || c == '*' || c == '/';
}
Int precedence(char c) {
    switch (c) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        default:
            return 0;
    }
}
void infixToPostfix(char* infix, char* postfix) {
    Stack s;
    s.top = -1;
    int k = 0;

    for (int i = 0; infix[i]; i++) {
       
        if (isalnum(infix[i])) {
            postfix[k++] = infix[i];
        }
           else if (infix[i] == '(') {
            push(&s, infix[i]);
        }
       
        else if (infix[i] == ')') {
            while (!isEmpty(&s) && peek(&s) != '(') {
                postfix[k++] = pop(&s);
            }
            if (!isEmpty(&s) && peek(&s) != '(') {
                printf("Invalid expression\n");
                return;
            } else {
                pop(&s); 
            }
        }
 
        else if (isOperator(infix[i])) {
            while (!isEmpty(&s) && precedence(peek(&s)) >= precedence(infix[i])) {
                postfix[k++] = pop(&s);
            }
            push(&s, infix[i]);
        }
    }
    while (!isEmpty(&s)) {
        postfix[k++] = pop(&s);
    }
    postfix[k] = '\0'; 
}
int main() {
  char infix[MAX], postfix[MAX];

    printf("Enter an infix expression: ");
    scanf("%s", infix);
     infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
